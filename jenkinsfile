pipeline {
    agent {
        docker {
            image 'python:3.8'
            args '-u root' // Run as root to install dependencies
        }
    }

    stages {
        stage('Setup Python Environment') {
            steps {
                // Setup Python virtual environment
                sh """
                python -m venv ${env.WORKSPACE}/venv
                """
            }
        }

        stage('Install dependencies') {
            steps {
                // Install dependencies
                sh """
                . ${env.WORKSPACE}/venv/bin/activate
                pip install --upgrade pip
                pip install -r requirements.txt
                """
            }
        }

        stage('Static Code Checking') {
            steps {
                script {
                    sh 'find . -name \\*.py | xargs pylint --load-plugins=pylint_django -f parseable | tee pylint.log'
                    recordIssues(
                        tool: pyLint(pattern: 'pylint.log'),
                        failTotalHigh: 10,
                    )
                }
            }
        }

        stage('Run tests') {
            steps {
                // Run tests and generate coverage report
                sh """
                . ${env.WORKSPACE}/venv/bin/activate
                pytest --junitxml=${env.WORKSPACE}/report.xml --cov=. --cov-report=xml:${env.WORKSPACE}/coverage.xml --cov-report=html
                """
            }
            post {
                always {
                    // Publish JUnit test results
                    junit '**/report.xml'
                    // Publish coverage report
                    cobertura coberturaReportFile: '**/coverage.xml'
                }
            }
        }

        stage('Deploy') {
            steps {
                // Add your deployment steps here
                sh """
                echo "Deploying application..."
                """
            }
        }
    }
}